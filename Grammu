-- COCO HUB Ultimate | Fully Working | Delta/KRNL/XENO
-- Features: SilentAim + AutoShoot + Aimbot + ESP + TeamTags + HandHitbox + Fly + NoClip + Invisible + FOV

local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local UIS = game:GetService("UserInputService")
local Workspace = game:GetService("Workspace")
local Camera = Workspace.CurrentCamera
local LocalPlayer = Players.LocalPlayer

-- ================= State =================
local State = {
    -- Combat
    Aimbot=false, SilentAim=false, AutoShoot=true,
    AimbotPart="Head", FOVRadius=150, ShowFOV=true, FOVRainbow=true, TeamCheck=false, AimbotSmoothness=0.5,
    -- ESP
    ESP=true, BoxESP=true, ESPColor=Color3.fromRGB(255,0,0),
    -- TeamTags
    TeamTag=true, TeamTagOffset=Vector3.new(0,3,0),
    -- HandHitbox
    SelfHandHitbox=true, HandTarget="Both", HandHitboxColor=Color3.fromRGB(0,255,0), HandHitboxSize=30,
    -- Movement
    WalkSpeed=16, JumpPower=50, Fly=false, FlySpeed=60, NoClip=false, Invisible=false
}

-- ================= Helpers =================
local safeDrawing = {}
do
    local ok, DrawingLib = pcall(function() return Drawing end)
    safeDrawing.available = ok and DrawingLib ~= nil
end

local function newDrawing(kind, props)
    if not safeDrawing.available then return nil end
    local ok,obj = pcall(function() return Drawing.new(kind) end)
    if not ok or not obj then return nil end
    if props then for k,v in pairs(props) do pcall(function() obj[k]=v end) end end
    return obj
end

local function worldToScreen(pos)
    local x,y,z = Camera:WorldToViewportPoint(pos)
    return Vector2.new(x,y), z>0
end

local function getClosestPlayer(fov)
    local closest, shortest = nil, fov
    for _, p in pairs(Players:GetPlayers()) do
        if p ~= LocalPlayer and p.Character and p.Character:FindFirstChild(State.AimbotPart) then
            if State.TeamCheck and p.Team == LocalPlayer.Team then continue end
            local pos = p.Character[State.AimbotPart].Position
            local screen, onScreen = worldToScreen(pos)
            if onScreen then
                local center = Vector2.new(Camera.ViewportSize.X/2, Camera.ViewportSize.Y/2)
                local dist = (screen - center).Magnitude
                if dist < shortest then
                    shortest = dist
                    closest = p
                end
            end
        end
    end
    return closest
end

-- ================= ArrayField UI =================
local ArrayField = nil
pcall(function()
    ArrayField = loadstring(game:HttpGet("https://raw.githubusercontent.com/Hosvile/Refinement/main/MC%3AArrayfield%20Library"))()
end)
if not ArrayField then return warn("ArrayField failed to load") end

local Window = ArrayField:CreateWindow({Name="COCO HUB Ultimate", LoadingTitle="Loading COCO HUB", ConfigurationSaving={Enabled=true, FileName="COCO_HUB"}, KeySystem=false})
local CombatTab = Window:CreateTab("Combat")
local MoveTab = Window:CreateTab("Movement")
local ESPTab = Window:CreateTab("ESP")
local TagsTab = Window:CreateTab("Tags")
local MiscTab = Window:CreateTab("Misc")

-- ================= UI Elements =================
-- Combat
CombatTab:CreateToggle({Name="Aimbot", CurrentValue=State.Aimbot, Callback=function(v) State.Aimbot=v end})
CombatTab:CreateToggle({Name="Silent Aim", CurrentValue=State.SilentAim, Callback=function(v) State.SilentAim=v end})
CombatTab:CreateToggle({Name="Auto Shoot", CurrentValue=State.AutoShoot, Callback=function(v) State.AutoShoot=v end})
CombatTab:CreateDropdown({Name="Aimbot Part", Options={"Head","HumanoidRootPart"}, CurrentOption=State.AimbotPart, MultiSelection=false, Callback=function(v) State.AimbotPart=v end})
CombatTab:CreateSlider({Name="FOV Radius", Range={50,1000}, Increment=1, CurrentValue=State.FOVRadius, Callback=function(v) State.FOVRadius=v end})
CombatTab:CreateToggle({Name="Show FOV Circle", CurrentValue=State.ShowFOV, Callback=function(v) State.ShowFOV=v end})
CombatTab:CreateToggle({Name="Rainbow FOV", CurrentValue=State.FOVRainbow, Callback=function(v) State.FOVRainbow=v end})
CombatTab:CreateToggle({Name="TeamCheck", CurrentValue=State.TeamCheck, Callback=function(v) State.TeamCheck=v end})
CombatTab:CreateSlider({Name="Aimbot Smoothness", Range={5,95}, Increment=1, CurrentValue=math.floor(State.AimbotSmoothness*100), Callback=function(v) State.AimbotSmoothness = math.clamp(v/100,0.05,1) end})

-- Hand Hitbox
CombatTab:CreateToggle({Name="Self Hand Hitbox", CurrentValue=State.SelfHandHitbox, Callback=function(v) State.SelfHandHitbox=v end})
CombatTab:CreateDropdown({Name="Hand Target", Options={"Both","Right","Left"}, CurrentOption=State.HandTarget, Callback=function(v) State.HandTarget=v end})
CombatTab:CreateColorPicker({Name="Hand Hitbox Color", Color=State.HandHitboxColor, Callback=function(v) State.HandHitboxColor=v end})
CombatTab:CreateSlider({Name="Hand Hitbox Size", Range={10,500}, Increment=1, CurrentValue=State.HandHitboxSize, Callback=function(v) State.HandHitboxSize=v end})

-- Movement
MoveTab:CreateSlider({Name="WalkSpeed", Range={16,200}, Increment=1, CurrentValue=State.WalkSpeed, Callback=function(v) State.WalkSpeed=v end})
MoveTab:CreateSlider({Name="JumpPower", Range={50,500}, Increment=1, CurrentValue=State.JumpPower, Callback=function(v) State.JumpPower=v end})
MoveTab:CreateToggle({Name="Fly", CurrentValue=State.Fly, Callback=function(v) State.Fly=v end})
MoveTab:CreateSlider({Name="Fly Speed", Range={10,300}, Increment=1, CurrentValue=State.FlySpeed, Callback=function(v) State.FlySpeed=v end})
MoveTab:CreateToggle({Name="NoClip", CurrentValue=State.NoClip, Callback=function(v) State.NoClip=v end})

-- ESP
ESPTab:CreateToggle({Name="Enable ESP", CurrentValue=State.ESP, Callback=function(v) State.ESP=v end})
ESPTab:CreateToggle({Name="Box ESP", CurrentValue=State.BoxESP, Callback=function(v) State.BoxESP=v end})
ESPTab:CreateColorPicker({Name="ESP Color", Color=State.ESPColor, Callback=function(v) State.ESPColor=v end})

-- Team Tags
TagsTab:CreateToggle({Name="Team Tags", CurrentValue=State.TeamTag, Callback=function(v) State.TeamTag=v end})
TagsTab:CreateSlider({Name="TeamTag Offset", Range={0,10}, Increment=0.1, CurrentValue=3, Callback=function(v) State.TeamTagOffset = Vector3.new(0,v,0) end})

-- Misc
MiscTab:CreateToggle({Name="Invisible", CurrentValue=State.Invisible, Callback=function(v) State.Invisible=v end})
local teleportSearchBox = MiscTab:CreateInput({Name="Search Player", PlaceholderText="Type player name"})
MiscTab:CreateButton({Name="Teleport Now", Callback=function()
    local query = tostring(teleportSearchBox.Value or "")
    if query == "" then return end
    for _,p in pairs(Players:GetPlayers()) do
        if string.find(p.Name:lower(), query:lower()) and p.Character and p.Character:FindFirstChild("HumanoidRootPart") then
            local hrp = LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("HumanoidRootPart")
            if hrp then hrp.CFrame = p.Character.HumanoidRootPart.CFrame + (p.Character.HumanoidRootPart.CFrame.LookVector * -3) end
            break
        end
    end
end})

-- GUI Hotkey
UIS.InputBegan:Connect(function(input,gp)
    if gp then return end
    if input.KeyCode==Enum.KeyCode.RightShift then Window:Toggle() end
end)

-- ================= FOV Circle =================
local FOVCircle = nil
local hue = 0
RunService.RenderStepped:Connect(function()
    if safeDrawing.available then
        if not FOVCircle then FOVCircle = newDrawing("Circle",{Radius=State.FOVRadius, Thickness=2, Filled=false, Visible=false}) end
        if State.ShowFOV then
            FOVCircle.Position = Vector2.new(Camera.ViewportSize.X/2, Camera.ViewportSize.Y/2)
            FOVCircle.Radius = State.FOVRadius
            if State.FOVRainbow then
                hue = (hue+1)%360
                FOVCircle.Color = Color3.fromHSV(hue/360,1,1)
            else
                FOVCircle.Color = Color3.fromRGB(255,255,255)
            end
            FOVCircle.Visible = true
        else FOVCircle.Visible=false end
    end
end)

-- ================= Movement / Fly / NoClip / Invisible =================
local FlyControllers = {}
local InvisibleStore = {}
local function enableFly(char)
    if not char or FlyControllers[char] then return end
    local hrp = char:FindFirstChild("HumanoidRootPart")
    if not hrp then return end
    local bv = Instance.new("BodyVelocity")
    bv.MaxForce = Vector3.new(1e5,1e5,1e5)
    bv.P = 1250
    bv.Velocity = Vector3.new(0,0,0)
    bv.Parent = hrp
    local bg = Instance.new("BodyGyro")
    bg.MaxTorque = Vector3.new(1e5,1e5,1e5)
    bg.P = 3000
    bg.CFrame = hrp.CFrame
    bg.Parent = hrp
    FlyControllers[char] = {BV=bv,BG=bg}
end
local function disableFly(char)
    if not char or not FlyControllers[char] then return end
    pcall(function() FlyControllers[char].BV:Destroy(); FlyControllers[char].BG:Destroy() end)
    FlyControllers[char]=nil
end

local function applyInvisible(char)
    if not char or InvisibleStore[char] then return end
    InvisibleStore[char]={}
    for _,part in pairs(char:GetChildren()) do
        if part:IsA("BasePart") then
            InvisibleStore[char][part]={Transparency=part.Transparency,CanCollide=part.CanCollide}
            part.Transparency=1; part.CanCollide=false
        elseif part:IsA("Accessory") then
            local handle = part:FindFirstChildWhichIsA("BasePart")
            if handle then
                InvisibleStore[char][handle]={Transparency=handle.Transparency,CanCollide=handle.CanCollide}
                handle.Transparency=1; handle.CanCollide=false
            end
        end
    end
end

local function restoreInvisible(char)
    if not char or not InvisibleStore[char] then return end
    for part,props in pairs(InvisibleStore[char]) do
        if part and part.Parent then part.Transparency=props.Transparency; part.CanCollide=props.CanCollide end
    end
    InvisibleStore[char]=nil
end

RunService.Heartbeat:Connect(function()
    local char = LocalPlayer.Character
    if char then
        local hum = char:FindFirstChildOfClass("Humanoid")
        if hum then
            hum.WalkSpeed = State.WalkSpeed
            hum.JumpPower = State.JumpPower
        end

        if State.Fly then enableFly(char) else disableFly(char) end

        if State.NoClip then
            for _,p in pairs(char:GetDescendants()) do
                if p:IsA("BasePart") then p.CanCollide=false end
            end
        end

        if State.Invisible then applyInvisible(char) else restoreInvisible(char) end
    end
end)

LocalPlayer.CharacterAdded:Connect(function(ch)
    if State.Invisible then applyInvisible(ch) end
end)

-- ================= Hand Hitbox =================
local HandESP = {}
RunService.RenderStepped:Connect(function()
    local char = LocalPlayer.Character
    if not char or not safeDrawing.available then return end
    local hands = {}
    if State.HandTarget=="Both" or State.HandTarget=="Right" then table.insert(hands,"RightHand") end
    if State.HandTarget=="Both" or State.HandTarget=="Left" then table.insert(hands,"LeftHand") end
    for _,hname in pairs(hands) do
        local part = char:FindFirstChild(hname)
        if part then
            if not HandESP[hname] then
                HandESP[hname] = newDrawing("Square",{Color=State.HandHitboxColor,Thickness=2,Filled=false,Visible=false})
            end
            local pos,onScreen = worldToScreen(part.Position)
            if onScreen then
                local size = Vector2.new(State.HandHitboxSize, State.HandHitboxSize)
                pcall(function()
                    HandESP[hname].Position = Vector2.new(pos.X-size.X/2,pos.Y-size.Y/2)
                    HandESP[hname].Size = size
                    HandESP[hname].Color = State.HandHitboxColor
                    HandESP[hname].Visible = State.SelfHandHitbox
                end)
            else
                HandESP[hname].Visible=false
            end
        end
    end
end)

-- ================= ESP + Team Tags =================
local ESPBoxes = {}
local TeamTags = {}
RunService.RenderStepped:Connect(function()
    for _,p in pairs(Players:GetPlayers()) do
        if p ~= LocalPlayer and p.Character and p.Character:FindFirstChild("HumanoidRootPart") then
            local hrp = p.Character.HumanoidRootPart
            local screenPos, onScreen = worldToScreen(hrp.Position)
            -- Box ESP
            if State.ESP and State.BoxESP and safeDrawing.available then
                if not ESPBoxes[p] then ESPBoxes[p] = newDrawing("Square",{Color=State.ESPColor,Thickness=2,Filled=false,Visible=false}) end
                local size = Vector2.new(40,40)
                if onScreen then
                    ESPBoxes[p].Position = Vector2.new(screenPos.X-size.X/2, screenPos.Y-size.Y/2)
                    ESPBoxes[p].Size = size
                    ESPBoxes[p].Color = State.ESPColor
                    ESPBoxes[p].Visible = true
                else ESPBoxes[p].Visible=false end
            end
            -- Team Tags
            if State.TeamTag and safeDrawing.available then
                local head = p.Character:FindFirstChild("Head")
                if head then
                    if not TeamTags[p] then TeamTags[p] = newDrawing("Text",{Text=p.Name,Size=20,Color=State.ESPColor,Center=true,Outline=true,Visible=false}) end
                    local tagPos, onScreen = worldToScreen(head.Position + State.TeamTagOffset)
                    if onScreen then
                        TeamTags[p].Position = tagPos
                        TeamTags[p].Text = p.Name
                        TeamTags[p].Color = State.ESPColor
                        TeamTags[p].Visible = true
                    else TeamTags[p].Visible=false end
                end
            end
        end
    end
end)

-- ================= Silent Aim + AutoShoot =================
local mt = getrawmetatable(game)
local oldNamecall = mt.__namecall
setreadonly(mt,false)
mt.__namecall = newcclosure(function(...)
    local args = {...}
    local method = getnamecallmethod()
    if (State.SilentAim or State.AutoShoot) and (method=="FireServer" or method=="InvokeServer") then
        local target = getClosestPlayer(State.FOVRadius)
        if target and target.Character and target.Character:FindFirstChild(State.AimbotPart) then
            args[2] = target.Character[State.AimbotPart].Position
        end
    end
    return oldNamecall(unpack(args))
end)
setreadonly(mt,true)

-- ================= END =================
print("COCO HUB Ultimate Loaded ✅")
