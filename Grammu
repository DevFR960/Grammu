-- COCO HUB DELTA (Native-friendly with Rayfield fallback)
-- Works on Delta (mobile) and executors that support loadstring+HttpGet.
-- Behavior:
-- 1) Try to load Rayfield using loadstring(game:HttpGet(...)). If available, use Rayfield UI.
-- 2) If Rayfield or HttpGet isn't available (common on Delta), use a native ScreenGui UI built with Instance.new.
-- Notes: Delta cannot reliably use Drawing or metatable hooks; Silent Redirect (bullet redirect) is disabled in native mode.

local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local UIS = game:GetService("UserInputService")
local Workspace = game:GetService("Workspace")
local LocalPlayer = Players.LocalPlayer
local Camera = Workspace.CurrentCamera

-- config/state
local state = {
    Aimbot = false,
    SilentAim = false, -- disabled in native fallback (visual only)
    Fly = false,
    ESP = false,
    Hitbox = false,
    Invisible = false,
    SpeedBoost = false,
}
local cfg = {
    AimPart = "Head",
    WalkSpeed = 16,
    JumpPower = 50,
    FlySpeed = 20,
    HitboxSize = 5,
}
local intern = {originalHumanoidProps = {}, originalHRPProps = {}, highlights = {}, flyVel = nil, flyGyro = nil, FlyConn = nil}

-- Utility
local function safeWarn(msg) pcall(function() warn(msg) end) end
local function findPlayerByNameCaseInsensitive(name)
    if not name then return nil end
    for _,p in pairs(Players:GetPlayers()) do if string.lower(p.Name) == string.lower(name) then return p end end
    return Players:FindFirstChild(name)
end

-- Targeting
local function GetSmartTarget()
    if not LocalPlayer.Character then return nil end
    local hrp = LocalPlayer.Character:FindFirstChild("HumanoidRootPart")
    if not hrp then return nil end
    local myPos = hrp.Position
    local best, bestScore = nil, math.huge
    for _,plr in pairs(Players:GetPlayers()) do
        if plr ~= LocalPlayer and plr.Character and plr.Character:FindFirstChild(cfg.AimPart) then
            local hum = plr.Character:FindFirstChild("Humanoid")
            if hum and hum.Health > 0 then
                local pos = plr.Character[cfg.AimPart].Position
                local dist = (myPos - pos).Magnitude
                if dist < bestScore then bestScore = dist best = {Player = plr, Pos = pos} end
            end
        end
    end
    return best
end

-- Camera aimbot lock
RunService.RenderStepped:Connect(function()
    if state.Aimbot and Camera and Camera.CFrame then
        local target = GetSmartTarget()
        if target and target.Pos then
            Camera.CFrame = CFrame.new(Camera.CFrame.Position, target.Pos)
        end
    end
end)

-- Fly (native-friendly)
local function startFly()
    if intern.FlyConn then return end
    if not intern.flyVel then
        intern.flyVel = Instance.new("BodyVelocity") intern.flyGyro = Instance.new("BodyGyro")
        intern.flyVel.MaxForce = Vector3.new(9e9,9e9,9e9)
        intern.flyGyro.MaxTorque = Vector3.new(9e9,9e9,9e9)
        intern.flyVel.P = 1e5 intern.flyGyro.P = 1e5
    end
    intern.FlyConn = RunService.RenderStepped:Connect(function()
        if not state.Fly then return end
        local char = LocalPlayer.Character
        if not char then return end
        local hrp = char:FindFirstChild("HumanoidRootPart")
        if not hrp then return end
        if intern.flyVel and not intern.flyVel.Parent then intern.flyVel.Parent = hrp end
        if intern.flyGyro and not intern.flyGyro.Parent then intern.flyGyro.Parent = hrp end
        local mv = Vector3.new()
        if UIS:IsKeyDown(Enum.KeyCode.W) then mv = mv + Camera.CFrame.LookVector end
        if UIS:IsKeyDown(Enum.KeyCode.S) then mv = mv - Camera.CFrame.LookVector end
        if UIS:IsKeyDown(Enum.KeyCode.A) then mv = mv - Camera.CFrame.RightVector end
        if UIS:IsKeyDown(Enum.KeyCode.D) then mv = mv + Camera.CFrame.RightVector end
        if UIS:IsKeyDown(Enum.KeyCode.Space) then mv = mv + Vector3.new(0,1,0) end
        if mv.Magnitude > 0 then mv = mv.Unit end
        intern.flyVel.Velocity = mv * cfg.FlySpeed
        intern.flyGyro.CFrame = Camera.CFrame
    end)
end
local function stopFly()
    if intern.flyVel then pcall(function() intern.flyVel:Destroy() end) intern.flyVel = nil end
    if intern.flyGyro then pcall(function() intern.flyGyro:Destroy() end) intern.flyGyro = nil end
    if intern.FlyConn then intern.FlyConn:Disconnect() intern.FlyConn = nil end
end

-- Hitbox expand/reset
local function ExpandHitboxes(size)
    for _,plr in pairs(Players:GetPlayers()) do
        if plr ~= LocalPlayer and plr.Character and plr.Character:FindFirstChild("HumanoidRootPart") then
            local hrp = plr.Character.HumanoidRootPart
            if not intern.originalHRPProps[plr] then intern.originalHRPProps[plr] = {Size = hrp.Size, Transparency = hrp.Transparency, CanCollide = hrp.CanCollide, BrickColor = hrp.BrickColor} end
            hrp.Size = Vector3.new(size, size, size)
            hrp.Transparency = 0.5
            pcall(function() hrp.BrickColor = BrickColor.new("Bright red") end)
            hrp.CanCollide = false
        end
    end
end
local function ResetHitboxes()
    for _,plr in pairs(Players:GetPlayers()) do
        if plr.Character and plr.Character:FindFirstChild("HumanoidRootPart") then
            local hrp = plr.Character:FindFirstChild("HumanoidRootPart")
            local orig = intern.originalHRPProps[plr]
            if orig and hrp then
                hrp.Size = orig.Size or Vector3.new(2,2,1)
                hrp.Transparency = orig.Transparency or 0
                hrp.CanCollide = (orig.CanCollide == nil) and true or orig.CanCollide
                pcall(function() hrp.BrickColor = orig.BrickColor or BrickColor.new("Medium stone grey") end)
            end
            intern.originalHRPProps[plr] = nil
        end
    end
end

-- ESP using Highlight
local function EnableESP()
    for _,plr in pairs(Players:GetPlayers()) do
        if plr ~= LocalPlayer and plr.Character and not plr.Character:FindFirstChild("CHighlight") then
            local h = Instance.new("Highlight") h.Name = "CHighlight" h.FillTransparency = 0.6 h.Parent = plr.Character intern.highlights[plr] = h
        end
    end
end
local function DisableESP()
    for _,plr in pairs(Players:GetPlayers()) do
        if plr.Character then local h = plr.Character:FindFirstChild("CHighlight") if h then h:Destroy() end end
    end
    intern.highlights = {}
end

-- Invisible
local function SetInvisible(state)
    if not LocalPlayer.Character then return end
    for _,part in pairs(LocalPlayer.Character:GetChildren()) do
        if part:IsA("BasePart") and part.Name ~= "HumanoidRootPart" then
            part.Transparency = state and 1 or 0
            local dec = part:FindFirstChildOfClass("Decal") if dec then dec.Transparency = state and 1 or 0 end
            part.CanCollide = not state
        end
    end
end

-- Cleanup
local function CleanupAll()
    RemoveUIButtons()
    stopFly()
    ResetHitboxes()
    DisableESP()
    SetInvisible(false)
    local orig = intern.originalHumanoidProps[LocalPlayer]
    if LocalPlayer.Character and orig then local hum = LocalPlayer.Character:FindFirstChildOfClass("Humanoid") if hum then hum.WalkSpeed = orig.WalkSpeed or 16 hum.JumpPower = orig.JumpPower or 50 end end
    for k,_ in pairs(state) do state[k] = false end
end

-- Minimal native UI builder
local NativeGUI = Instance.new("ScreenGui") NativeGUI.Name = "CocoHubNativeGUI"
NativeGUI.ResetOnSpawn = false
NativeGUI.Parent = LocalPlayer:WaitForChild("PlayerGui")

local function MakeButton(name, pos, size, text, callback)
    local f = Instance.new("Frame") f.Size = size f.Position = pos f.BackgroundColor3 = Color3.fromRGB(30,30,30) f.BorderSizePixel = 0 f.Parent = NativeGUI
    local b = Instance.new("TextButton") b.Size = UDim2.new(1,0,1,0) b.Position = UDim2.new(0,0,0,0) b.Text = text b.Font = Enum.Font.SourceSans b.TextSize = 18 b.TextColor3 = Color3.new(1,1,1) b.BackgroundTransparency = 1 b.Parent = f
    b.MouseButton1Click:Connect(callback)
    return f, b
end

-- Build simple panel
local panel = Instance.new("Frame") panel.Name = "CocoPanel" panel.Size = UDim2.new(0, 0, 0, 200) panel.Position = UDim2.new(0, 10, 0, 50) panel.BackgroundColor3 = Color3.fromRGB(18,18,18) panel.BorderSizePixel = 0 panel.Parent = NativeGUI
local uiList = Instance.new("UIListLayout") uiList.Parent = panel uiList.Padding = UDim.new(0,6)

local function toggleAimbot()
    state.Aimbot = not state.Aimbot
end
local function toggleFly()
    state.Fly = not state.Fly if state.Fly then startFly() else stopFly() end
end
local function toggleESP()
    state.ESP = not state.ESP if state.ESP then EnableESP() else DisableESP() end
end
local function toggleHitbox()
    state.Hitbox = not state.Hitbox if state.Hitbox then ExpandHitboxes(cfg.HitboxSize) else ResetHitboxes() end
end
local function toggleInvisible()
    state.Invisible = not state.Invisible SetInvisible(state.Invisible)
end
local function toggleSpeed()
    state.SpeedBoost = not state.SpeedBoost
    local char = LocalPlayer.Character if char then local hum = char:FindFirstChildOfClass("Humanoid") if hum then hum.WalkSpeed = state.SpeedBoost and (cfg.WalkSpeed*2) or cfg.WalkSpeed end end
end

-- Buttons
MakeButton("AimBtn", UDim2.new(0,0,0,0), UDim2.new(0,200,0,30), "Toggle Aimbot", toggleAimbot).Parent = panel
MakeButton("FlyBtn", UDim2.new(0,0,0,0), UDim2.new(0,200,0,30), "Toggle Fly", toggleFly).Parent = panel
MakeButton("ESPBtn", UDim2.new(0,0,0,0), UDim2.new(0,200,0,30), "Toggle ESP", toggleESP).Parent = panel
MakeButton("HitBtn", UDim2.new(0,0,0,0), UDim2.new(0,200,0,30), "Toggle Hitbox", toggleHitbox).Parent = panel
MakeButton("InvBtn", UDim2.new(0,0,0,0), UDim2.new(0,200,0,30), "Toggle Invisible", toggleInvisible).Parent = panel
MakeButton("SpdBtn", UDim2.new(0,0,0,0), UDim2.new(0,200,0,30), "Toggle SpeedBoost", toggleSpeed).Parent = panel

-- small toggle handle for mobile
local toggleBtn = Instance.new("TextButton") toggleBtn.Size = UDim2.new(0,90,0,30) toggleBtn.Position = UDim2.new(0,10,0,10) toggleBtn.Text = "COCO" toggleBtn.Font = Enum.Font.SourceSans toggleBtn.TextSize = 20 toggleBtn.Parent = NativeGUI
local isPanelOpen = true
toggleBtn.MouseButton1Click:Connect(function()
    isPanelOpen = not isPanelOpen
    panel.Visible = isPanelOpen
end)

-- helper to remove UI buttons on cleanup
function RemoveUIButtons()
    pcall(function() NativeGUI:Destroy() end)
end

-- Respawn handling
LocalPlayer.CharacterAdded:Connect(function(char)
    task.delay(0.5, function()
        local hum = char:FindFirstChildOfClass("Humanoid")
        if hum then intern.originalHumanoidProps[LocalPlayer] = {WalkSpeed = hum.WalkSpeed, JumpPower = hum.JumpPower} hum.WalkSpeed = state.SpeedBoost and (cfg.WalkSpeed*2) or cfg.WalkSpeed hum.JumpPower = cfg.JumpPower or hum.JumpPower end
        if state.Hitbox then task.wait(0.5) ExpandHitboxes(cfg.HitboxSize) end
        if state.ESP then task.wait(0.5) EnableESP() end
        if state.Invisible then SetInvisible(true) end
    end)
end)

-- Quick message to user in output
print("COCO HUB DELTA: Native UI loaded. If you want Rayfield UI, ensure your executor supports game:HttpGet + loadstring and re-run with Rayfield enabled.")

-- Try to load Rayfield if user explicitly asked
local function tryLoadRayfield()
    local ok, rf = pcall(function()
        if not loadstring or not game.HttpGet then error("no loadstring/HttpGet") end
        return loadstring(game:HttpGet('https://sirius.menu/rayfield'))()
    end)
    if ok and rf then
        return true, rf
    end
    return false, nil
end

-- If user insisted on Rayfield and it's available, we can re-initialize using it.
-- For Delta most likely this will fail; keep native as default.

return true
