-- COCO_UI_ArrayField.lua
-- UI frontend using ArrayField. Run AFTER COCO_Core.lua.
-- It expects getgenv().COCO_CORE to exist.

local core = getgenv().COCO_CORE
if not core then
    warn("COCO_CORE not found. Run COCO_Core.lua first.")
    return
end

local State = core.State
local newDrawing = core.newDrawing
local drawingAvailable = core.drawingAvailable

-- Load ArrayField
local ArrayField = loadstring(game:HttpGet("https://raw.githubusercontent.com/Hosvile/Refinement/main/MC%3AArrayfield%20Library"))()
local Window = ArrayField:CreateWindow({
    Name="COCO HUB | Delta UI",
    LoadingTitle="COCO HUB UI",
    ConfigurationSaving = { Enabled = false },
    KeySystem = false
})

-- Tabs
local CombatTab = Window:CreateTab("Combat")
local ESPTab = Window:CreateTab("ESP")
local MoveTab = Window:CreateTab("Movement")
local MiscTab = Window:CreateTab("Misc")
local SystemTab = Window:CreateTab("System")

-- Keep local drawings
local FOVCircle = nil
if drawingAvailable then
    FOVCircle = newDrawing("Circle",{Color=State.FOVColor,Thickness=2,Filled=false,Visible=false,Radius=State.FOVRadius})
end

local ESPObjects = {} -- player -> {Outline,Health,Name}

-- Helper to sync UI->State automatically
local function makeToggle(name, init, cb)
    return CombatTab:CreateToggle({Name=name, CurrentValue=init, Callback=function(v) cb(v) end})
end

-- Combat UI creation (bind to core.State)
local AimbotToggle = CombatTab:CreateToggle({Name="Aimbot", CurrentValue=State.Aimbot, Callback=function(v) State.Aimbot=v end})
local SilentAimToggle = CombatTab:CreateToggle({Name="Silent Aim", CurrentValue=State.SilentAim, Callback=function(v) State.SilentAim=v end})
local AutoShootToggle = CombatTab:CreateToggle({Name="AutoShoot", CurrentValue=State.AutoShoot, Callback=function(v) State.AutoShoot=v end})
local AimbotPartDD = CombatTab:CreateDropdown({Name="Aimbot Part", Options={"Head","HumanoidRootPart"}, CurrentOption=State.AimbotPart, Callback=function(v) State.AimbotPart=v end})
local FOVSlider = CombatTab:CreateSlider({Name="FOV Radius", Range={50,1000}, Increment=1, CurrentValue=State.FOVRadius, Callback=function(v) State.FOVRadius=v if FOVCircle then pcall(function() FOVCircle.Radius=v end) end end})
local RainbowFOVToggle = CombatTab:CreateToggle({Name="Rainbow FOV", CurrentValue=State.FOVRainbow, Callback=function(v) State.FOVRainbow=v end})
local FOVColorPicker = CombatTab:CreateColorPicker({Name="FOV Color", Color=State.FOVColor, Callback=function(v) State.FOVColor=v if FOVCircle then pcall(function() FOVCircle.Color=v end) end end})

-- ESP UI
local ESPEnableToggle = ESPTab:CreateToggle({Name="Enable ESP", CurrentValue=State.ESP, Callback=function(v) State.ESP=v end})
local TargetESPToggle = ESPTab:CreateToggle({Name="Target ESP highlight", CurrentValue=State.TargetESP, Callback=function(v) State.TargetESP=v end})
local ESPColorPicker = ESPTab:CreateColorPicker({Name="ESP Color", Color=State.ESPColor, Callback=function(v) State.ESPColor=v end})
local ShowNamesToggle = ESPTab:CreateToggle({Name="Show Names", CurrentValue=State.ShowNames, Callback=function(v) State.ShowNames=v end})

-- Hitbox UI
local HitboxToggle = CombatTab:CreateToggle({Name="Hitbox Expand (Others)", CurrentValue=State.Hitbox, Callback=function(v) State.Hitbox=v end})
local HitboxSizeSlider = CombatTab:CreateSlider({Name="Hitbox Size", Range={10,500}, Increment=1, CurrentValue=State.HitboxSize, Callback=function(v) State.HitboxSize=v end})

-- Self hand UI
local SelfHandToggle = CombatTab:CreateToggle({Name="Self Hand Hitbox", CurrentValue=State.SelfHandHitbox, Callback=function(v) State.SelfHandHitbox=v end})
local HandSelect = CombatTab:CreateDropdown({Name="Hand Target", Options={"Both","Right","Left"}, CurrentOption=State.HandTarget, Callback=function(v) State.HandTarget=v end})
local HandSizeSlider = CombatTab:CreateSlider({Name="Hand Hitbox Size", Range={1,50}, Increment=1, CurrentValue=State.HandHitboxSize, Callback=function(v) State.HandHitboxSize=v end})

-- Movement UI
MoveTab:CreateSlider({Name="WalkSpeed", Range={0,200}, Increment=1, CurrentValue=State.WalkSpeed, Callback=function(v) State.WalkSpeed=v end})
MoveTab:CreateSlider({Name="JumpPower", Range={0,200}, Increment=1, CurrentValue=State.JumpPower, Callback=function(v) State.JumpPower=v end})
local FlyToggle = MoveTab:CreateToggle({Name="Fly", CurrentValue=State.Fly, Callback=function(v) State.Fly=v end})
local FlySpeedSlider = MoveTab:CreateSlider({Name="Fly Speed", Range={1,200}, Increment=1, CurrentValue=State.FlySpeed, Callback=function(v) State.FlySpeed=v end})
local NoClipToggle = MoveTab:CreateToggle({Name="NoClip", CurrentValue=State.NoClip, Callback=function(v) State.NoClip=v end})

-- Misc UI
local InvisibleToggle = MiscTab:CreateToggle({Name="Invisible", CurrentValue=State.Invisible, Callback=function(v) State.Invisible=v end})

-- System UI
SystemTab:CreateButton({Name="END (Disable All)", Interact="Interact", Callback=function()
    State.Aimbot=false; State.SilentAim=false; State.AutoShoot=false
    State.ESP=false; State.TargetESP=false
    State.Hitbox=false; State.SelfHandHitbox=false
    State.Fly=false; State.NoClip=false; State.Invisible=false
    -- restore local hands/hitboxes
    if LocalPlayer.Character then core.restoreOriginalHandSizes(LocalPlayer.Character); core.restoreOriginalHitbox(LocalPlayer) end
end})
SystemTab:CreateLabel("Toggle GUI: RightShift")

-- Hotkey toggle
UIS.InputBegan:Connect(function(input, gp) if gp then return end if input.KeyCode == Enum.KeyCode.RightShift then Window:Toggle() end end)

-- UI drawing loop: update FOV circle and manage ESP drawings
if drawingAvailable then
    RunService.RenderStepped:Connect(function()
        -- FOV circle visible only when aim active
        if FOVCircle then
            if State.Aimbot or State.SilentAim then
                FOVCircle.Visible = true
                pcall(function()
                    FOVCircle.Position = Vector2.new(Camera.ViewportSize.X/2, Camera.ViewportSize.Y/2)
                    FOVCircle.Radius = State.FOVRadius
                    if State.FOVRainbow then FOVCircle.Color = Color3.fromHSV((tick()%5)/5,1,1) else FOVCircle.Color = State.FOVColor end
                end)
            else
                pcall(function() FOVCircle.Visible = false end)
            end
        end

        -- ESP drawings (box+hp+name)
        if State.ESP then
            for _,p in pairs(Players:GetPlayers()) do
                if p~=LocalPlayer and p.Character and p.Character:FindFirstChild("HumanoidRootPart") then
                    local hrp = p.Character.HumanoidRootPart
                    local hum = p.Character:FindFirstChildOfClass("Humanoid")
                    if not ESPObjects[p] then
                        ESPObjects[p] = {
                            Outline = newDrawing("Square",{Color=State.ESPColor,Thickness=2,Filled=false,Visible=false}),
                            Health = newDrawing("Text",{Text="",Color=State.ESPColor,Size=13,Center=true,Visible=false}),
                            Name = newDrawing("Text",{Text="",Color=State.ESPColor,Size=13,Center=true,Visible=false})
                        }
                    end
                    local draw = ESPObjects[p]
                    local scr,onScreen = Camera:WorldToViewportPoint(hrp.Position)
                    if onScreen then
                        pcall(function()
                            local sizeX,sizeY = 40,80
                            draw.Outline.Position = Vector2.new(scr.X-sizeX/2, scr.Y-sizeY/2)
                            draw.Outline.Size = Vector2.new(sizeX,sizeY)
                            local color = State.ESPColor
                            if State.TargetESP and core._internal and core._internal.CurrentTarget == p then color = Color3.fromRGB(0,255,0) end
                            draw.Outline.Color = color
                            draw.Outline.Visible = true

                            draw.Health.Position = Vector2.new(scr.X, scr.Y - sizeY/2 - 10)
                            if hum then draw.Health.Text = "HP: "..math.floor(hum.Health).."/"..math.floor(hum.MaxHealth) end
                            draw.Health.Color = color
                            draw.Health.Visible = true

                            if State.ShowNames then
                                draw.Name.Position = Vector2.new(scr.X, scr.Y + sizeY/2 + 6)
                                draw.Name.Text = p.Name
                                draw.Name.Color = color
                                draw.Name.Visible = true
                            else
                                draw.Name.Visible = false
                            end
                        end)
                    else
                        pcall(function() draw.Outline.Visible=false; draw.Health.Visible=false; draw.Name.Visible=false end)
                    end
                else
                    if ESPObjects[p] then
                        pcall(function() if ESPObjects[p].Outline then ESPObjects[p].Outline.Visible=false end; if ESPObjects[p].Health then ESPObjects[p].Health.Visible=false end; if ESPObjects[p].Name then ESPObjects[p].Name.Visible=false end end)
                    end
                end
            end
        else
            for p,draw in pairs(ESPObjects) do
                pcall(function() if draw.Outline then draw.Outline.Visible=false end; if draw.Health then draw.Health.Visible=false end; if draw.Name then draw.Name.Visible=false end end)
            end
        end
    end)
end

-- sync initial settings to UI (avoid "open by default" mismatch)
pcall(function() AimbotToggle:Set(State.Aimbot) end)
pcall(function() SilentAimToggle:Set(State.SilentAim) end)
pcall(function() AutoShootToggle:Set(State.AutoShoot) end)
pcall(function() AimbotPartDD:Set(State.AimbotPart) end)
pcall(function() FOVSlider:Set(State.FOVRadius) end)
pcall(function() RainbowFOVToggle:Set(State.FOVRainbow) end)
pcall(function() FOVColorPicker:Set(State.FOVColor) end)
pcall(function() ESPEnableToggle:Set(State.ESP) end)
pcall(function() TargetESPToggle:Set(State.TargetESP) end)
pcall(function() ESPColorPicker:Set(State.ESPColor) end)
pcall(function() ShowNamesToggle:Set(State.ShowNames) end)
pcall(function() HitboxToggle:Set(State.Hitbox) end)
pcall(function() HitboxSizeSlider:Set(State.HitboxSize) end)
pcall(function() SelfHandToggle:Set(State.SelfHandHitbox) end)
pcall(function() HandSelect:Set(State.HandTarget) end)
pcall(function() HandSizeSlider:Set(State.HandHitboxSize) end)
pcall(function() FlyToggle:Set(State.Fly) end)
pcall(function() FlySpeedSlider:Set(State.FlySpeed) end)
pcall(function() NoClipToggle:Set(State.NoClip) end)
pcall(function() InvisibleToggle:Set(State.Invisible) end)

print("COCO UI loaded and connected to COCO_CORE")
