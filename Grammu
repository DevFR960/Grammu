-- COCO HUB | Delta Full Version | ArrayField UI
-- Supports: KRNL / Delta / Xeno
-- NOTE: All Combat/ESP toggles default OFF. FOV circle only visible when Aimbot or Silent Aim ON.

local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local UIS = game:GetService("UserInputService")
local Workspace = game:GetService("Workspace")
local Camera = Workspace.CurrentCamera
local LocalPlayer = Players.LocalPlayer

-- ================= State =================
local State = {
    -- Combat / Aim
    Aimbot=false,
    SilentAim=false,
    AimbotPart="Head",
    FOVRadius=120,
    FOVRainbow=false,
    -- ESP / Hitbox
    ESP=false,
    TargetESP=false,
    ESPColor=Color3.fromRGB(255,0,0),
    Hitbox=false,
    HitboxSize=10,
    HitboxColor=Color3.fromRGB(0,255,0),
    -- Movement
    WalkSpeed=16,
    JumpPower=50,
    Fly=false,
    FlySpeed=40,
    NoClip=false,
    -- Misc
    Invisible=false
}

-- ================= Helpers =================
local safeDrawing={}
do
    local ok,DrawingLib=pcall(function() return Drawing end)
    safeDrawing.available=ok and DrawingLib~=nil
end

local function newDrawing(kind,props)
    if not safeDrawing.available then return nil end
    local ok,obj=pcall(function() return Drawing.new(kind) end)
    if not ok or not obj then return nil end
    if props then
        for k,v in pairs(props) do pcall(function() obj[k]=v end) end
    end
    return obj
end

-- ================= Hitbox original storage =================
local OriginalHitboxes={}
local function storeOriginalHitbox(plr)
    if not plr or not plr.Character then return end
    local hrp=plr.Character:FindFirstChild("HumanoidRootPart")
    if hrp and not OriginalHitboxes[plr] then
        OriginalHitboxes[plr]=hrp.Size
    end
end
local function restoreOriginalHitbox(plr)
    if not plr or not plr.Character then return end
    local hrp=plr.Character:FindFirstChild("HumanoidRootPart")
    if hrp and OriginalHitboxes[plr] then
        pcall(function() hrp.Size=OriginalHitboxes[plr]; hrp.CanCollide=false end)
        OriginalHitboxes[plr]=nil
    end
end

-- ================= ArrayField UI =================
local ArrayField = loadstring(game:HttpGet("https://raw.githubusercontent.com/Hosvile/Refinement/main/MC%3AArrayfield%20Library"))()
local Window = ArrayField:CreateWindow({
    Name="COCO HUB | Delta Pro Ultimate",
    LoadingTitle="COCO HUB Loading",
    ConfigurationSaving={Enabled=true,FileName="COCO_HUB_Delta"},
    KeySystem=false
})

-- Tabs
local CombatTab = Window:CreateTab("Combat")
local MoveTab = Window:CreateTab("Movement")
local ESPTab = Window:CreateTab("ESP")
local MiscTab = Window:CreateTab("Misc")

-- ================= UI Elements =================
-- Combat
local AimbotToggle = CombatTab:CreateToggle({Name="Aimbot",CurrentValue=State.Aimbot,Callback=function(v) State.Aimbot=v end})
local SilentAimToggle = CombatTab:CreateToggle({Name="Silent Aim",CurrentValue=State.SilentAim,Callback=function(v) State.SilentAim=v end})
local AimbotPartDropdown = CombatTab:CreateDropdown({Name="Aimbot Part",Options={"Head","HumanoidRootPart"},CurrentOption=State.AimbotPart,MultiSelection=false,Callback=function(v) State.AimbotPart=v end})
local FOVSlider = CombatTab:CreateSlider({Name="FOV Radius",Range={50,1000},Increment=1,CurrentValue=State.FOVRadius,Callback=function(v) State.FOVRadius=v end})
local RainbowFOVToggle = CombatTab:CreateToggle({Name="Rainbow FOV",CurrentValue=State.FOVRainbow,Callback=function(v) State.FOVRainbow=v end})
local HitboxToggle = CombatTab:CreateToggle({Name="Hitbox Expand",CurrentValue=State.Hitbox,Callback=function(v) State.Hitbox=v end})
local HitboxSizeSlider = CombatTab:CreateSlider({Name="Hitbox Size",Range={10,500},Increment=1,CurrentValue=State.HitboxSize,Callback=function(v) State.HitboxSize=v end})
local HitboxColorPicker = CombatTab:CreateColorPicker({Name="Hitbox Color",Color=State.HitboxColor,Callback=function(v) State.HitboxColor=v end})

-- Movement
MoveTab:CreateSlider({Name="WalkSpeed",Range={16,200},Increment=1,CurrentValue=State.WalkSpeed,Callback=function(v) State.WalkSpeed=v end})
MoveTab:CreateSlider({Name="JumpPower",Range={50,300},Increment=1,CurrentValue=State.JumpPower,Callback=function(v) State.JumpPower=v end})
MoveTab:CreateToggle({Name="Fly",CurrentValue=State.Fly,Callback=function(v) State.Fly=v end})
MoveTab:CreateSlider({Name="Fly Speed",Range={10,200},Increment=1,CurrentValue=State.FlySpeed,Callback=function(v) State.FlySpeed=v end})
MoveTab:CreateToggle({Name="NoClip",CurrentValue=State.NoClip,Callback=function(v) State.NoClip=v end})

-- ESP / Misc
local ESPEnableToggle = ESPTab:CreateToggle({Name="Enable ESP",CurrentValue=State.ESP,Callback=function(v) State.ESP=v end})
local TargetESPToggle = ESPTab:CreateToggle({Name="Target ESP",CurrentValue=State.TargetESP,Callback=function(v) State.TargetESP=v end})
local ESPColorPicker = ESPTab:CreateColorPicker({Name="ESP Color",Color=State.ESPColor,Callback=function(v) State.ESPColor=v end})
local InvisibleToggle = MiscTab:CreateToggle({Name="Invisible",CurrentValue=State.Invisible,Callback=function(v) State.Invisible=v end})

-- GUI Hotkey
UIS.InputBegan:Connect(function(input,gp)
    if gp then return end
    if input.KeyCode==Enum.KeyCode.RightShift then Window:Toggle() end
end)

-- ================= Invisible =================
local InvisibleStore={}
local function applyInvisible(char)
    if not char or InvisibleStore[char] then return end
    InvisibleStore[char]={}
    for _,part in pairs(char:GetChildren()) do
        if part:IsA("BasePart") then
            InvisibleStore[char][part]={Transparency=part.Transparency,CanCollide=part.CanCollide}
            pcall(function() part.Transparency=1; part.CanCollide=false end)
        elseif part:IsA("Accessory") then
            local handle=part:FindFirstChildWhichIsA("BasePart")
            if handle then
                InvisibleStore[char][handle]={Transparency=handle.Transparency,CanCollide=handle.CanCollide}
                pcall(function() handle.Transparency=1; handle.CanCollide=false end)
            end
        end
    end
end
local function restoreInvisible(char)
    if not char or not InvisibleStore[char] then return end
    for part,props in pairs(InvisibleStore[char]) do
        if part and part.Parent then
            pcall(function() part.Transparency=props.Transparency; part.CanCollide=props.CanCollide end)
        end
    end
    InvisibleStore[char]=nil
end
RunService.Heartbeat:Connect(function()
    if State.Invisible then
        if LocalPlayer.Character then applyInvisible(LocalPlayer.Character) end
    else
        if LocalPlayer.Character then restoreInvisible(LocalPlayer.Character) end
    end
end)
LocalPlayer.CharacterAdded:Connect(function(ch)
    if State.Invisible then applyInvisible(ch) end
end)

-- ================= ESP / FOV / Target =================
local ESPObjects={}
local FOVCircle=nil
if safeDrawing.available then
    FOVCircle=newDrawing("Circle",{Color=Color3.fromRGB(0,255,255),Thickness=2,Filled=false,Visible=false,Radius=State.FOVRadius})
end

local function worldToScreenVec(pos)
    local x,y,z=Camera:WorldToViewportPoint(pos)
    return Vector2.new(x,y),z>0
end

local CurrentTarget=nil
local function GetBestTarget()
    local vw,vh=Camera.ViewportSize.X,Camera.ViewportSize.Y
    local best=State.FOVRadius
    local bestP=nil
    for _,p in pairs(Players:GetPlayers()) do
        if p~=LocalPlayer and p.Character and p.Character:FindFirstChild(State.AimbotPart) then
            local hum=p.Character:FindFirstChildOfClass("Humanoid")
            if hum and hum.Health>0 then
                local sp,onScreen=Camera:WorldToViewportPoint(p.Character[State.AimbotPart].Position)
                if onScreen then
                    local d=(Vector2.new(sp.X,sp.Y)-Vector2.new(vw/2,vh/2)).Magnitude
                    if d<best then best= d; bestP=p end
                end
            end
        end
    end
    return bestP
end

-- ================= Movement / Fly / NoClip =================
RunService.RenderStepped:Connect(function()
    local char=LocalPlayer.Character
    if not char then return end
    local hrp=char:FindFirstChild("HumanoidRootPart")
    local hum=char:FindFirstChildOfClass("Humanoid")
    if hum then pcall(function() hum.WalkSpeed=State.WalkSpeed; hum.JumpPower=State.JumpPower end) end

    -- Fly
    if State.Fly and hrp then
        local camCF=Camera.CFrame
        local moveDir=Vector3.new()
        if UIS:IsKeyDown(Enum.KeyCode.W) then moveDir=moveDir+camCF.LookVector end
        if UIS:IsKeyDown(Enum.KeyCode.S) then moveDir=moveDir-camCF.LookVector end
        if UIS:IsKeyDown(Enum.KeyCode.A) then moveDir=moveDir-camCF.RightVector end
        if UIS:IsKeyDown(Enum.KeyCode.D) then moveDir=moveDir+camCF.RightVector end
        if moveDir.Magnitude>0 then pcall(function() hrp.Velocity=moveDir.Unit*State.FlySpeed end)
        else pcall(function() hrp.Velocity=Vector3.new(0,0,0) end) end
    end

    -- NoClip
    if State.NoClip and char then
        for _,part in pairs(char:GetChildren()) do
            if part:IsA("BasePart") then pcall(function() part.CanCollide=false end) end
        end
    end
end)

-- ================= Hitbox / ESP / FOV Update =================
RunService.RenderStepped:Connect(function()
    -- Hitbox
    if State.Hitbox then
        for _,p in pairs(Players:GetPlayers()) do
            if p~=LocalPlayer and p.Character and p.Character:FindFirstChild("HumanoidRootPart") then
                local hrp=p.Character:FindFirstChild("HumanoidRootPart")
                storeOriginalHitbox(p)
                pcall(function() hrp.Size=Vector3.new(State.HitboxSize,State.HitboxSize,State.HitboxSize); hrp.CanCollide=false end)
            end
        end
    end

    -- Acquire target
    if State.Aimbot or State.SilentAim then CurrentTarget=GetBestTarget() else CurrentTarget=nil end

    -- FOV Circle
    if FOVCircle then
        if State.Aimbot or State.SilentAim then
            FOVCircle.Visible=true
            pcall(function()
                FOVCircle.Position=Vector2.new(Camera.ViewportSize.X/2,Camera.ViewportSize.Y/2)
                FOVCircle.Radius=State.FOVRadius
                if State.FOVRainbow then
                    FOVCircle.Color=Color3.fromHSV((tick()%5)/5,1,1)
                else
                    FOVCircle.Color=Color3.fromRGB(0,255,255)
                end
            end)
        else FOVCircle.Visible=false end
    end

    -- ESP
    if safeDrawing.available then
        for _,p in pairs(Players:GetPlayers()) do
            if p~=LocalPlayer and p.Character and p.Character:FindFirstChild("HumanoidRootPart") then
                local hrp=p.Character:FindFirstChild("HumanoidRootPart")
                local hum=p.Character:FindFirstChildOfClass("Humanoid")
                if not ESPObjects[p] then
                    ESPObjects[p]={Outline=newDrawing("Square",{Color=State.ESPColor,Thickness=2,Filled=false,Visible=false}),
                                    Text=newDrawing("Text",{Text="",Color=State.ESPColor,Size=14,Center=true,Visible=false})}
                end
                local box=ESPObjects[p]
                if hrp and hum then
                    local scr,onScreen=worldToScreenVec(hrp.Position)
                    if onScreen and State.ESP then
                        local sizeX,sizeY=40,80
                        pcall(function()
                            box.Outline.Position=Vector2.new(scr.X-sizeX/2,scr.Y-sizeY/2)
                            box.Outline.Size=Vector2.new(sizeX,sizeY)
                            box.Outline.Color=State.ESPColor
                            box.Outline.Visible=true

                            box.Text.Position=Vector2.new(scr.X,scr.Y-sizeY/2-10)
                            box.Text.Text="HP: "..math.floor(hum.Health).."/"..math.floor(hum.MaxHealth)
                            box.Text.Color=State.ESPColor
                            box.Text.Visible=true

                            if State.TargetESP and CurrentTarget==p then
                                box.Outline.Color=Color3.fromRGB(0,255,0)
                                box.Text.Color=Color3.fromRGB(0,255,0)
                            end
                        end)
                    else pcall(function() box.Outline.Visible=false; box.Text.Visible=false end) end
                end
            end
        end
    end
end)

-- ================= Silent Aim Hook =================
do
    local ok,mt=pcall(function() return getrawmetatable(game) end)
    if ok and mt then
        local oldNamecall=mt.__namecall
        setreadonly(mt,false)
        mt.__namecall=newcclosure(function(self,...)
            local method=getnamecallmethod()
            local args={...}
            if (State.SilentAim or State.Aimbot) and CurrentTarget and CurrentTarget.Character and CurrentTarget.Character:FindFirstChild(State.AimbotPart) and method=="FireServer" then
                local targetPos=CurrentTarget.Character[State.AimbotPart].Position
                for i=1,#args do
                    local a=args[i]
                    if typeof(a)=="Vector3" then args[i]=targetPos
                    elseif type(a)=="table" then
                        if a.Position and typeof(a.Position)=="Vector3" then a.Position=targetPos
                        elseif a.pos and typeof(a.pos)=="Vector3" then a.pos=targetPos
                        elseif a.hitpos and typeof(a.hitpos)=="Vector3" then a.hitpos=targetPos end
                        args[i]=a
                    end
                end
                return oldNamecall(self,unpack(args))
            end
            return oldNamecall(self,...)
        end)
        setreadonly(mt,true)
    else warn("Silent Aim hook unavailable on this executor.") end
end

print("COCO HUB Loaded — Combat/ESP toggles default OFF; FOV visible only when Aimbot/SilentAim ON; Fly & NoClip ready")

