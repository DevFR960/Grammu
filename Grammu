-- COCO HUB | Delta/Xeno/KRNL Compatible (No AutoShoot)
-- Tries Rayfield (pcall). If fails -> native ScreenGui fallback.
-- Invisible: tries pastebin (pcall). If fails -> builtin invisible (apply/restore).
-- Features: Aimbot (lock), SilentAim (lock-only), Fly, Hitbox up to 500, ESP, Rainbow FOV

local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local UIS = game:GetService("UserInputService")
local Workspace = game:GetService("Workspace")
local Camera = Workspace.CurrentCamera
local LocalPlayer = Players.LocalPlayer

-- ================= State =================
local State = {
    Aimbot=false, SilentAim=false, -- no AutoShoot
    Hitbox=false, Invisible=false,
    Fly=false, FlySpeed=40,
    WalkSpeed=16, JumpPower=50,
    AimbotPart="Head",
    FOVRadius=120, FOVRainbow=true,
    ESP=true, TargetESP=true,
    HitboxSize=10,
    GUIVisible=true
}

-- ================= Helpers =================
local function safeRequireLoad(url)
    local ok, res = pcall(function()
        local body = game:HttpGet(url)
        local fn = loadstring(body)
        if type(fn) == "function" then
            return fn()
        else
            return fn
        end
    end)
    return ok, res
end

-- Drawing safe create (pcall wrappers)
local safeDrawing = {}
do
    local ok, DrawingLib = pcall(function() return Drawing end)
    safeDrawing.available = ok and DrawingLib ~= nil
end

local function newDrawing(kind, props)
    if not safeDrawing.available then return nil end
    local ok, obj = pcall(function() return Drawing.new(kind) end)
    if not ok or not obj then return nil end
    if props then
        for k,v in pairs(props) do
            pcall(function() obj[k] = v end)
        end
    end
    return obj
end

-- ================= Rayfield (pcall) =================
local Rayfield = nil
local Window = nil
local loadedRayfield, rayfieldErr = pcall(function()
    -- try primary source (as you requested previously)
    return loadstring(game:HttpGet("https://sirius.menu/rayfield"))()
end)
if loadedRayfield then
    Rayfield = loadedRayfield
end

if Rayfield and type(Rayfield.CreateWindow) == "function" then
    Window = Rayfield:CreateWindow({
        Name = "COCO HUB | Delta Pro Ultimate",
        LoadingTitle = "COCO HUB Loading",
        ConfigFolder = "COCO_HUB_Delta"
    })
else
    Rayfield = nil
    Window = nil
end

-- ================= Native GUI Fallback =================
local ScreenGui, Buttons = nil, {}
local function createNativeGUI()
    if not LocalPlayer or not LocalPlayer:FindFirstChild("PlayerGui") then return end
    if ScreenGui then return end
    local sg = Instance.new("ScreenGui")
    sg.Name = "COCO_HUB_FallbackGUI"
    sg.ResetOnSpawn = false
    sg.Parent = LocalPlayer:FindFirstChild("PlayerGui")

    local function CreateButton(text, pos, size)
        local btn = Instance.new("TextButton")
        btn.Name = text
        btn.Text = text
        btn.Size = size or UDim2.new(0,120,0,36)
        btn.Position = pos
        btn.BackgroundColor3 = Color3.fromRGB(40,40,40)
        btn.BorderSizePixel = 0
        btn.TextColor3 = Color3.fromRGB(255,255,255)
        btn.Parent = sg
        return btn
    end

    -- stack buttons vertically left side
    local xOff, yOff = 10, 10
    local spacing = 46

    local bFly = CreateButton("Fly", UDim2.new(0, xOff, 0, yOff))
    yOff = yOff + spacing
    local bESP = CreateButton("ESP", UDim2.new(0, xOff, 0, yOff))
    yOff = yOff + spacing
    local bInv = CreateButton("Invisible", UDim2.new(0, xOff, 0, yOff))
    yOff = yOff + spacing
    local bHit = CreateButton("Hitbox", UDim2.new(0, xOff, 0, yOff))
    yOff = yOff + spacing
    local bAim = CreateButton("Aimbot", UDim2.new(0, xOff, 0, yOff))
    yOff = yOff + spacing
    local bSilent = CreateButton("SilentAim", UDim2.new(0, xOff, 0, yOff))
    yOff = yOff + spacing
    local bToggleGUI = CreateButton("HideGUI", UDim2.new(0, xOff, 0, yOff))

    Buttons = {
        Fly = bFly,
        ESP = bESP,
        Invisible = bInv,
        Hitbox = bHit,
        Aimbot = bAim,
        SilentAim = bSilent,
        ToggleGUI = bToggleGUI
    }

    -- click handlers
    bFly.MouseButton1Click:Connect(function()
        State.Fly = not State.Fly
        Buttons.Fly.BackgroundColor3 = State.Fly and Color3.fromRGB(0,190,0) or Color3.fromRGB(40,40,40)
    end)
    bESP.MouseButton1Click:Connect(function()
        State.ESP = not State.ESP
        Buttons.ESP.BackgroundColor3 = State.ESP and Color3.fromRGB(0,190,0) or Color3.fromRGB(40,40,40)
    end)
    bInv.MouseButton1Click:Connect(function()
        State.Invisible = not State.Invisible
        Buttons.Invisible.BackgroundColor3 = State.Invisible and Color3.fromRGB(0,190,0) or Color3.fromRGB(40,40,40)
        -- call invisible toggle handler below via state change
    end)
    bHit.MouseButton1Click:Connect(function()
        State.Hitbox = not State.Hitbox
        Buttons.Hitbox.BackgroundColor3 = State.Hitbox and Color3.fromRGB(0,190,0) or Color3.fromRGB(40,40,40)
    end)
    bAim.MouseButton1Click:Connect(function()
        State.Aimbot = not State.Aimbot
        Buttons.Aimbot.BackgroundColor3 = State.Aimbot and Color3.fromRGB(0,190,0) or Color3.fromRGB(40,40,40)
    end)
    bSilent.MouseButton1Click:Connect(function()
        State.SilentAim = not State.SilentAim
        Buttons.SilentAim.BackgroundColor3 = State.SilentAim and Color3.fromRGB(0,190,0) or Color3.fromRGB(40,40,40)
    end)
    bToggleGUI.MouseButton1Click:Connect(function()
        if sg.Enabled then
            sg.Enabled = false
            bToggleGUI.Text = "ShowGUI"
        else
            sg.Enabled = true
            bToggleGUI.Text = "HideGUI"
        end
    end)

    ScreenGui = sg
end

-- If Rayfield loaded, build UI using it; otherwise native fallback
local function buildUI()
    if Window then
        -- build Rayfield UI
        local MainTab = Window:CreateTab("Combat")
        local MoveTab = Window:CreateTab("Movement")
        local ESPTab = Window:CreateTab("ESP")
        local MiscTab = Window:CreateTab("Misc")

        local MainSection = MainTab:CreateSection("Combat")
        MainSection:CreateToggle({Name="Aimbot (lock)", CurrentValue=false, Callback=function(v) State.Aimbot=v end})
        MainSection:CreateToggle({Name="Silent Aim (lock)", CurrentValue=false, Callback=function(v) State.SilentAim=v end})
        MainSection:CreateSlider({Name="Hitbox Size", Range={10,500}, Increment=1, CurrentValue=10, Callback=function(v) State.HitboxSize=v end})
        MainSection:CreateDropdown({Name="Aimbot Part", Options={"Head","HumanoidRootPart"}, CurrentOption="Head", Callback=function(v) State.AimbotPart=v end})
        MainSection:CreateSlider({Name="FOV Radius", Range={50,1000}, Increment=1, CurrentValue=120, Callback=function(v) State.FOVRadius=v end})
        MainSection:CreateToggle({Name="Rainbow FOV", CurrentValue=true, Callback=function(v) State.FOVRainbow=v end})

        local MoveSection = MoveTab:CreateSection("Player")
        MoveSection:CreateSlider({Name="WalkSpeed", Range={16,200}, Increment=1, CurrentValue=16, Callback=function(v) State.WalkSpeed=v end})
        MoveSection:CreateSlider({Name="JumpPower", Range={50,300}, Increment=1, CurrentValue=50, Callback=function(v) State.JumpPower=v end})
        MoveSection:CreateToggle({Name="Fly", CurrentValue=false, Callback=function(v) State.Fly=v end})
        MoveSection:CreateSlider({Name="Fly Speed", Range={10,200}, Increment=1, CurrentValue=40, Callback=function(v) State.FlySpeed=v end})

        local ESPSection = ESPTab:CreateSection("ESP")
        ESPSection:CreateToggle({Name="Enable ESP", CurrentValue=true, Callback=function(v) State.ESP=v end})
        ESPSection:CreateToggle({Name="Target ESP", CurrentValue=true, Callback=function(v) State.TargetESP=v end})

        local MiscSection = MiscTab:CreateSection("Misc")
        MiscSection:CreateToggle({Name="Invisible (pastebin)", CurrentValue=false, Callback=function(v) State.Invisible=v end})

        -- hotkey to toggle UI
        UIS.InputBegan:Connect(function(input, gp)
            if gp then return end
            if input.KeyCode == Enum.KeyCode.RightShift then
                Window:Toggle()
            end
        end)
    else
        -- fallback native GUI
        createNativeGUI()
    end
end

-- build ui
buildUI()

-- ================= Invisible (pastebin attempt with fallback) =================
local PASTE_URL = "https://pastebin.com/raw/3Rnd9rHf"
local InvisibleFn = nil
local pasteLoaded = false
do
    local ok, res = pcall(function()
        local body = game:HttpGet(PASTE_URL)
        local fn = loadstring(body)
        if type(fn) == "function" then
            return fn
        end
        return nil
    end)
    if ok and res then
        InvisibleFn = res
        pasteLoaded = true
    end
end

local InvisibleStore = {} -- store per-character original props

local function applyInvisibleToCharacter(char)
    if not char then return end
    if InvisibleStore[char] then return end
    InvisibleStore[char] = {}
    for _, part in pairs(char:GetChildren()) do
        if part:IsA("BasePart") then
            InvisibleStore[char][part] = {Transparency = part.Transparency, CanCollide = part.CanCollide}
            pcall(function() part.Transparency = 1; part.CanCollide = false end)
        elseif part:IsA("Accessory") then
            local handle = part:FindFirstChildWhichIsA("BasePart")
            if handle then
                InvisibleStore[char][handle] = {Transparency = handle.Transparency, CanCollide = handle.CanCollide}
                pcall(function() handle.Transparency = 1; handle.CanCollide = false end)
            end
        end
    end
end

local function restoreInvisibleForCharacter(char)
    if not char or not InvisibleStore[char] then return end
    for part, props in pairs(InvisibleStore[char]) do
        if part and part.Parent then
            pcall(function() part.Transparency = props.Transparency; part.CanCollide = props.CanCollide end)
        end
    end
    InvisibleStore[char] = nil
end

-- apply/restore handlers when State.Invisible toggles
local lastInvisibleState = false
RunService.Heartbeat:Connect(function()
    if State.Invisible ~= lastInvisibleState then
        lastInvisibleState = State.Invisible
        -- if paste function exists and loaded, try to call it when turning on
        if State.Invisible and pasteLoaded and InvisibleFn then
            pcall(function() InvisibleFn() end)
        end

        -- fallback apply/restore
        if State.Invisible then
            if LocalPlayer.Character then applyInvisibleToCharacter(LocalPlayer.Character) end
        else
            if LocalPlayer.Character then restoreInvisibleForCharacter(LocalPlayer.Character) end
        end
    end
end)

-- ensure respawn handling
LocalPlayer.CharacterAdded:Connect(function(ch)
    -- restore/ reapply depending on state
    if State.Invisible then
        if pasteLoaded and InvisibleFn then
            pcall(function() InvisibleFn() end)
        end
        applyInvisibleToCharacter(ch)
    else
        -- nothing by default
    end
end)

-- ================= ESP + FOV + Targeting =================
local ESPObjects = {}
local FOVCircle = nil
if safeDrawing.available then
    FOVCircle = newDrawing("Circle", {Color = Color3.fromRGB(0,255,255), Thickness = 2, Filled = false, Visible = true, Radius = State.FOVRadius})
end

local function CreateESP(p)
    if ESPObjects[p] then return ESPObjects[p] end
    local box = newDrawing("Square", {Color = Color3.fromRGB(255,0,0), Thickness = 2, Filled = false, Visible = false})
    ESPObjects[p] = box
    return box
end

local CurrentTarget = nil

RunService.RenderStepped:Connect(function()
    -- viewport size
    local vw, vh = Camera.ViewportSize.X, Camera.ViewportSize.Y

    -- update FOV circle
    if FOVCircle then
        if State.FOVRainbow then
            local hue = (tick() % 5) / 5
            pcall(function() FOVCircle.Color = Color3.fromHSV(hue,1,1) end)
        end
        pcall(function() FOVCircle.Position = Vector2.new(vw/2, vh/2); FOVCircle.Radius = State.FOVRadius end)
    end

    -- local character updates: WalkSpeed, JumpPower, Fly
    local char = LocalPlayer.Character
    if char and char:FindFirstChild("HumanoidRootPart") then
        local hrp = char.HumanoidRootPart
        local hum = char:FindFirstChildOfClass("Humanoid")
        if hum then
            pcall(function() hum.WalkSpeed = State.WalkSpeed; hum.JumpPower = State.JumpPower end)
        end

        if State.Fly then
            local camCF = Camera.CFrame
            local moveDir = Vector3.new()
            if UIS:IsKeyDown(Enum.KeyCode.W) then moveDir = moveDir + camCF.LookVector end
            if UIS:IsKeyDown(Enum.KeyCode.S) then moveDir = moveDir - camCF.LookVector end
            if UIS:IsKeyDown(Enum.KeyCode.A) then moveDir = moveDir - camCF.RightVector end
            if UIS:IsKeyDown(Enum.KeyCode.D) then moveDir = moveDir + camCF.RightVector end
            if moveDir.Magnitude > 0 then
                pcall(function() hrp.Velocity = moveDir.Unit * State.FlySpeed end)
            else
                pcall(function() hrp.Velocity = Vector3.new(0,0,0) end)
            end
        end
    end

    -- Hitbox apply
    if State.Hitbox then
        for _,p in pairs(Players:GetPlayers()) do
            if p ~= LocalPlayer and p.Character and p.Character:FindFirstChild("HumanoidRootPart") then
                pcall(function() p.Character.HumanoidRootPart.Size = Vector3.new(State.HitboxSize, State.HitboxSize, State.HitboxSize) end)
            end
        end
    end

    -- Acquire target for Aimbot/SilentAim
    CurrentTarget = nil
    if State.Aimbot or State.SilentAim then
        local best = State.FOVRadius
        for _,p in pairs(Players:GetPlayers()) do
            if p ~= LocalPlayer and p.Character and p.Character:FindFirstChild(State.AimbotPart) then
                local pos3 = p.Character[State.AimbotPart].Position
                local sp, onScreen = Camera:WorldToViewportPoint(pos3)
                if onScreen then
                    local d = (Vector2.new(sp.X, sp.Y) - Vector2.new(vw/2, vh/2)).Magnitude
                    if d < best then
                        best = d
                        CurrentTarget = p
                    end
                end
            end
        end
    end

    -- ESP update
    if State.ESP then
        for _,p in pairs(Players:GetPlayers()) do
            if p ~= LocalPlayer and p.Character and p.Character:FindFirstChild("HumanoidRootPart") then
                local box = CreateESP(p)
                local sp, onScreen = Camera:WorldToViewportPoint(p.Character.HumanoidRootPart.Position)
                if onScreen then
                    pcall(function()
                        box.Position = Vector2.new(sp.X - 25, sp.Y - 25)
                        box.Size = Vector2.new(50, 50)
                        box.Visible = true
                        if State.TargetESP and CurrentTarget then
                            box.Color = (p == CurrentTarget) and Color3.fromRGB(0,255,0) or Color3.fromRGB(255,0,0)
                        else
                            box.Color = Color3.fromRGB(255,0,0)
                        end
                    end)
                else
                    pcall(function() box.Visible = false end)
                end
            end
        end
    else
        for _,box in pairs(ESPObjects) do pcall(function() box.Visible = false end) end
    end
end)

-- Cleanup on unload (best-effort)
local function cleanup()
    pcall(function()
        for _,box in pairs(ESPObjects) do if box and safeDrawing.available then box:Remove() end end
        if FOVCircle and safeDrawing.available then pcall(function() FOVCircle:Remove() end) end
        if LocalPlayer.Character then restoreInvisibleForCharacter(LocalPlayer.Character) end
        if ScreenGui then pcall(function() ScreenGui:Destroy() end) end
    end)
end

-- try to detect script unload (some executors fire this)
if syn and syn.disconnect_gui then
    -- nothing
end

-- print ready
pcall(function() print("COCO HUB loaded (compatible build). UI: " .. (Window and "Rayfield" or "Native")) end)

-- end of script
