-- COCO HUB | Delta Full Version | Hand Hitbox Visual Only
local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local UIS = game:GetService("UserInputService")
local Workspace = game:GetService("Workspace")
local Camera = Workspace.CurrentCamera
local LocalPlayer = Players.LocalPlayer

-- ================= State =================
local State = {
    -- Combat / Aim
    Aimbot=false,
    SilentAim=false,
    AimbotPart="Head",
    FOVRadius=120,
    FOVRainbow=false,

    -- ESP / Hitbox (other players)
    ESP=false,
    TargetESP=false,
    ESPColor=Color3.fromRGB(255,0,0),
    Hitbox=false,              -- expand HRP of others
    HitboxSize=10,
    HitboxColor=Color3.fromRGB(0,255,0),

    -- Self-hand hitbox (visual + touch)
    SelfHandHitbox=false,
    HandTarget="Both",         -- "Both","Right","Left"
    HandHitboxSize=1.0,        -- scale relative to hand (multiplier)
    HandHitboxColor=Color3.fromRGB(0,255,0),
    HandHitboxHitColor=Color3.fromRGB(255,0,0),
    HandHitboxAlpha=0.7,

    -- Movement
    WalkSpeed=16,
    JumpPower=50,
    Fly=false,
    FlySpeed=40,
    NoClip=false,

    -- Misc
    Invisible=false
}

-- ================= Helpers =================
local safeDrawing = {}
do
    local ok, DrawingLib = pcall(function() return Drawing end)
    safeDrawing.available = ok and DrawingLib~=nil
end
local function newDrawing(kind, props)
    if not safeDrawing.available then return nil end
    local ok,obj = pcall(function() return Drawing.new(kind) end)
    if not ok or not obj then return nil end
    if props then for k,v in pairs(props) do pcall(function() obj[k]=v end) end end
    return obj
end
-- ================= Hand Hitbox =================
local HandHitboxes = {} -- [handPart] = {Part=part, Draw=square, Conn=touchConnection, lastHitTick=0}
local function createHandHitboxFor(handPart)
    if not handPart or not handPart:IsA("BasePart") then return end
    if HandHitboxes[handPart] then return HandHitboxes[handPart] end

    -- create world part
    local hb = Instance.new("Part")
    hb.Name = "COCO_HUB_HandHitbox"
    hb.Size = handPart.Size * (State.HandHitboxSize or 1)
    hb.Transparency = State.HandHitboxAlpha or 0.7
    hb.Anchored = true
    hb.CanCollide = false
    hb.CanTouch = true
    hb.Parent = workspace

    -- drawing indicator
    local draw = safeDrawing.available and newDrawing("Square",{Color=State.HandHitboxColor,Thickness=2,Filled=false,Visible=false}) or nil

    -- touch handler: flash draw color on hit when touching other player's character
    local conn
    conn = hb.Touched:Connect(function(otherPart)
        if not otherPart or not otherPart.Parent then return end
        local hitPlr = Players:GetPlayerFromCharacter(otherPart.Parent)
        if hitPlr and hitPlr ~= LocalPlayer then
            if draw then
                local prev = draw.Color
                pcall(function() draw.Color = State.HandHitboxHitColor end)
                delay(0.12, function() pcall(function() draw.Color = prev end) end)
            end
        end
    end)

    HandHitboxes[handPart] = {Part=hb, Draw=draw, Conn=conn}
    return HandHitboxes[handPart]
end

local function destroyAllHandHitboxes()
    for hand,data in pairs(HandHitboxes) do
        pcall(function()
            if data.Conn then data.Conn:Disconnect() end
            if data.Part then data.Part:Destroy() end
            if data.Draw then data.Draw.Visible = false end
        end)
    end
    HandHitboxes = {}
end

-- ================= Movement =================
RunService.Heartbeat:Connect(function()
    local char = LocalPlayer.Character
    if char then
        local hum = char:FindFirstChildOfClass("Humanoid")
        if hum then pcall(function() hum.WalkSpeed=State.WalkSpeed; hum.JumpPower=State.JumpPower end) end

        -- NoClip
        if State.NoClip then
            for _,p in pairs(char:GetDescendants()) do
                if p:IsA("BasePart") then p.CanCollide=false end
            end
        end
    end
end)

-- ================= Invisible =================
local InvisibleStore = {}
local function applyInvisible(char)
    if not char or InvisibleStore[char] then return end
    InvisibleStore[char] = {}
    for _,part in pairs(char:GetChildren()) do
        if part:IsA("BasePart") then
            InvisibleStore[char][part] = {Transparency=part.Transparency, CanCollide=part.CanCollide}
            part.Transparency=1; part.CanCollide=false
        end
    end
end
local function restoreInvisible(char)
    if not char or not InvisibleStore[char] then return end
    for part,props in pairs(InvisibleStore[char]) do
        if part and part.Parent then part.Transparency=props.Transparency; part.CanCollide=props.CanCollide end
    end
    InvisibleStore[char] = nil
end
RunService.Heartbeat:Connect(function()
    if LocalPlayer.Character then
        if State.Invisible then applyInvisible(LocalPlayer.Character)
        else restoreInvisible(LocalPlayer.Character) end
    end
end)
-- ================= Update Hand Hitboxes =================
RunService.RenderStepped:Connect(function()
    if State.SelfHandHitbox and LocalPlayer.Character then
        local char = LocalPlayer.Character
        local hands = {}
        if State.HandTarget=="Both" or State.HandTarget=="Right" then
            table.insert(hands,char:FindFirstChild("RightHand") or char:FindFirstChild("Right Arm") or char:FindFirstChild("RightLowerArm"))
        end
        if State.HandTarget=="Both" or State.HandTarget=="Left" then
            table.insert(hands,char:FindFirstChild("LeftHand") or char:FindFirstChild("Left Arm") or char:FindFirstChild("LeftLowerArm"))
        end

        local keep = {}
        for _,hand in pairs(hands) do
            if hand and hand:IsA("BasePart") then
                local data = HandHitboxes[hand]
                if not data then data=createHandHitboxFor(hand) end
                if data and data.Part then
                    data.Part.Size = hand.Size * (State.HandHitboxSize or 1)
                    data.Part.CFrame = hand.CFrame
                    if data.Draw then
                        local scr,onScreen = Camera:WorldToViewportPoint(hand.Position)
                        if onScreen then
                            local s = math.clamp((hand.Size.Magnitude/2)*(State.HandHitboxSize or 1),6,200)
                            data.Draw.Position=Vector2.new(scr.X-s/2,scr.Y-s/2)
                            data.Draw.Size=Vector2.new(s,s)
                            data.Draw.Color=State.HandHitboxColor
                            data.Draw.Visible=true
                        else data.Draw.Visible=false end
                    end
                end
                keep[hand]=true
            end
        end

        for hand,data in pairs(HandHitboxes) do
            if not keep[hand] then
                if data.Conn then data.Conn:Disconnect() end
                if data.Part then data.Part:Destroy() end
                if data.Draw then data.Draw.Visible=false end
                HandHitboxes[hand]=nil
            end
        end
    else
        destroyAllHandHitboxes()
    end
end)

print("COCO HUB | Hand Hitbox Visual Ready")
